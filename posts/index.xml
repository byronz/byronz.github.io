<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on igni ðŸ‡¨ðŸ‡³ ðŸ‡¨ðŸ‡¦</title>
    <link>https://byronz.github.io/posts/</link>
    <description>Recent content in Posts on igni ðŸ‡¨ðŸ‡³ ðŸ‡¨ðŸ‡¦</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 | æœ±æ›‰æ¸… | &lt;small&gt;powered by&lt;/small&gt; &lt;a href=&#34;gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 21 Sep 2017 16:10:27 -0400</lastBuildDate>
    
	<atom:link href="https://byronz.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>My blog site setup tips</title>
      <link>https://byronz.github.io/posts/notes_hugo/</link>
      <pubDate>Thu, 21 Sep 2017 16:10:27 -0400</pubDate>
      
      <guid>https://byronz.github.io/posts/notes_hugo/</guid>
      <description>The first mistake you might have about Github Pages is about the subtle difference between User &amp;amp; Org Pages and Project Page. It takes me a while to realize that the first page can only point to the static content in master branch, which you don&amp;rsquo;t have the possiblity of switching to gh-page branch or master/doc (you can do that with project repo though). So you only publish your generated static content in User Page as git submodule.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://byronz.github.io/posts/first/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://byronz.github.io/posts/first/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
  </channel>
</rss>